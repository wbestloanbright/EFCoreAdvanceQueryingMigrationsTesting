// <auto-generated />
using Contacts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Contacts.Migrations
{
    [DbContext(typeof(ContactsContext))]
    [Migration("20170813192643_Fourth")]
    partial class Fourth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Contacts")
                .HasAnnotation("ProductVersion", "2.0.0-preview2-25794")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Contacts.Company", b =>
                {
                    b.Property<int>("CompanyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyName")
                        .IsUnicode(false);

                    b.Property<string>("CompanyNickName")
                        .IsUnicode(false);

                    b.Property<DateTime?>("DateAdded");

                    b.HasKey("CompanyId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Contacts.CompanyPerson", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("CompanyId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("PersonId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyPersons");
                });

            modelBuilder.Entity("Contacts.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Password")
                        .IsUnicode(false);

                    b.Property<string>("UserId")
                        .IsUnicode(false);

                    b.HasKey("LoginId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Contacts.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("BirthDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<decimal>("Height")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(6,2)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PersonTypeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("PersonId");

                    b.HasIndex("LastName")
                        .HasName("IX_LNAME");

                    b.HasIndex("PersonTypeId");

                    b.HasIndex("LastName", "FirstName")
                        .IsUnique()
                        .HasName("UQ_LNAME");

                    b.ToTable("People","Contacts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("Contacts.PersonPhone", b =>
                {
                    b.Property<int>("PersonPhoneId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PersonId");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("PersonPhoneId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonPhones");
                });

            modelBuilder.Entity("Contacts.PersonResume", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<string>("ResumeText")
                        .IsUnicode(false);

                    b.HasKey("PersonId");

                    b.ToTable("PersonResumes");
                });

            modelBuilder.Entity("Contacts.PersonType", b =>
                {
                    b.Property<int>("PersonTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("PersonTypeName")
                        .IsUnicode(false);

                    b.HasKey("PersonTypeId");

                    b.ToTable("PersonTypes");
                });

            modelBuilder.Entity("Contacts.PersonViewInfo", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsUnicode(false);

                    b.Property<string>("LastName")
                        .IsUnicode(false);

                    b.Property<string>("PersonTypeName")
                        .IsUnicode(false);

                    b.HasKey("PersonId");

                    b.ToTable("PersonView");
                });

            modelBuilder.Entity("Contacts.Student", b =>
                {
                    b.HasBaseType("Contacts.Person");

                    b.Property<string>("College")
                        .IsUnicode(false);

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Contacts.CompanyPerson", b =>
                {
                    b.HasOne("Contacts.Company", "Company")
                        .WithMany("CompanyPersons")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_COMPANYPERSON_COMPANY")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Contacts.Person", "Person")
                        .WithMany("CompanyPersons")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_COMPANYPERSON_PERSON")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Contacts.Person", b =>
                {
                    b.HasOne("Contacts.PersonType", "PersonType")
                        .WithMany("Persons")
                        .HasForeignKey("PersonTypeId")
                        .HasConstraintName("FK_PERSON_PERSONTYPE");
                });

            modelBuilder.Entity("Contacts.PersonPhone", b =>
                {
                    b.HasOne("Contacts.Person", "Person")
                        .WithMany("PersonPnones")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("FK_PHONE_PERSON")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Contacts.PersonResume", b =>
                {
                    b.HasOne("Contacts.Person", "Person")
                        .WithOne("PersonResume")
                        .HasForeignKey("Contacts.PersonResume", "PersonId")
                        .HasConstraintName("FK_RESUME_PERSON")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
